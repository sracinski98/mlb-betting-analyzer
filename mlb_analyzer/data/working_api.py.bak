"""MLB API with working odds processing"""
import pandas as pd
import requests
from datetime import datetime, timedelta
import logging

class MLBApi:
    ESPN_MLB_ENDPOINT = "https://site.api.espn.com/apis/site/v2/sports/baseball/mlb"
    
    def __init__(self, odds_api_key: str = "fe3e1db58259d6d7d3599e2ae3d22ecc"):
        self.logger = logging.getLogger(__name__)
        from mlb_analyzer.data.providers.odds_api_provider import TheOddsAPIProvider
        self.odds_provider = TheOddsAPIProvider(odds_api_key)
        self.cache = {}
        self.cache_ttl = {
            'odds': timedelta(minutes=5),
            'games': timedelta(minutes=1)
        }
    
    def get_live_games(self) -> pd.DataFrame:
        """Fetch today's MLB games"""
        try:
            # Get today's date in YYYYMMDD format
            today = datetime.now().strftime('%Y%m%d')
            
            response = requests.get(
                f"{self.ESPN_MLB_ENDPOINT}/scoreboard",
                params={
                    'limit': 100,  # Get all games
                    'dates': today  # Specify today's date
                }
            )
            data = response.json()
            
            games = []
            for event in data.get('events', []):
                game_data = {
                    'game_id': event['id'],
                    'status': event['status']['type']['name'],
                    'home_team': event['competitions'][0]['competitors'][0]['team']['abbreviation'],
                    'away_team': event['competitions'][0]['competitors'][1]['team']['abbreviation'],
                }
                games.append(game_data)
            
            return pd.DataFrame(games)
            
        except Exception as e:
            self.logger.error(f"Error fetching games: {str(e)}")
            return pd.DataFrame()
    
    def get_live_odds(self) -> pd.DataFrame:
        """Fetch and process current MLB betting odds"""
        cache_key = 'live_odds'
        
        if cache_key in self.cache:
            cache_entry = self.cache[cache_key]
            if datetime.now() - cache_entry['timestamp'] < self.cache_ttl['odds']:
                return cache_entry['data']
        
        try:
            if self.odds_provider:
                # Get odds from provider
                odds_df = self.odds_provider.get_all_odds()
                
                if isinstance(odds_df, pd.DataFrame) and not odds_df.empty:
                    # Clean team names to match ESPN abbreviations
                    odds_df['home_team'] = odds_df['home_team'].apply(self._normalize_team_name)
                    odds_df['away_team'] = odds_df['away_team'].apply(self._normalize_team_name)
                    
                    if isinstance(raw_odds, pd.DataFrame):
                    # Normalize team names
                    raw_odds['home_team'] = raw_odds['home_team'].apply(self._normalize_team_name)
                    raw_odds['away_team'] = raw_odds['away_team'].apply(self._normalize_team_name)
                    
                    # Group odds by game and calculate averages
                    odds_df = raw_odds.groupby(['game_id', 'home_team', 'away_team']).agg({
                        'home_moneyline': 'mean',
                        'away_moneyline': 'mean',
                        'total_runs': 'mean',
                        'over_odds': 'mean',
                        'under_odds': 'mean'
                    }).reset_index()
                    
                    # Add bookmaker info
                    odds_df['bookmaker'] = raw_odds.groupby('game_id').size().map(lambda x: f'Average ({x} books)')
                    
                    # Round appropriately
                    agg_odds['home_moneyline'] = agg_odds['home_moneyline'].round()
                    agg_odds['away_moneyline'] = agg_odds['away_moneyline'].round()
                    agg_odds['total_runs'] = agg_odds['total_runs'].round(1)
                    agg_odds['over_odds'] = agg_odds['over_odds'].round()
                    agg_odds['under_odds'] = agg_odds['under_odds'].round()
                    agg_odds['last_update'] = datetime.now().isoformat()
                    
                    # Cache results
                    self.cache[cache_key] = {
                        'data': agg_odds,
                        'timestamp': datetime.now()
                    }
                    
                    return agg_odds
            
            return pd.DataFrame(columns=[
                'game_id', 'home_team', 'away_team', 'home_moneyline', 'away_moneyline',
                'total_runs', 'over_odds', 'under_odds', 'bookmaker', 'last_update'
            ])
            
        except Exception as e:
            self.logger.error(f"Error processing odds: {str(e)}")
            return pd.DataFrame(columns=[
                'game_id', 'home_team', 'away_team', 'home_moneyline', 'away_moneyline',
                'total_runs', 'over_odds', 'under_odds', 'bookmaker', 'last_update'
            ])
    
    def _normalize_team_name(self, name: str) -> str:
        """Convert full team names to ESPN abbreviations"""
        team_mapping = {
            'Baltimore Orioles': 'BAL',
            'Boston Red Sox': 'BOS',
            'Chicago White Sox': 'CHW',
            'Cleveland Guardians': 'CLE',
            'Detroit Tigers': 'DET',
            'Houston Astros': 'HOU',
            'Kansas City Royals': 'KC',
            'Los Angeles Angels': 'LAA',
            'Minnesota Twins': 'MIN',
            'New York Yankees': 'NYY',
            'Oakland Athletics': 'OAK',
            'Seattle Mariners': 'SEA',
            'Tampa Bay Rays': 'TB',
            'Texas Rangers': 'TEX',
            'Toronto Blue Jays': 'TOR',
            'Arizona Diamondbacks': 'ARI',
            'Atlanta Braves': 'ATL',
            'Chicago Cubs': 'CHC',
            'Cincinnati Reds': 'CIN',
            'Colorado Rockies': 'COL',
            'Los Angeles Dodgers': 'LAD',
            'Miami Marlins': 'MIA',
            'Milwaukee Brewers': 'MIL',
            'New York Mets': 'NYM',
            'Philadelphia Phillies': 'PHI',
            'Pittsburgh Pirates': 'PIT',
            'San Diego Padres': 'SD',
            'San Francisco Giants': 'SF',
            'St. Louis Cardinals': 'STL',
            'Washington Nationals': 'WSH'
        }
        return team_mapping.get(name, name)
